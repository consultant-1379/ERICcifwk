#!/bin/bash
#
# httpd        Startup script for the Apache HTTP Server
#
# chkconfig: - 85 15
# description: The Apache HTTP Server is an efficient and extensible  \
#	       server implementing the current HTTP standards.
# processname: httpd
# config: /etc/httpd/conf/httpd.conf
# config: /etc/sysconfig/httpd
# pidfile: /var/run/httpd/httpd.pid
#
### BEGIN INIT INFO
# Provides: httpd
# Required-Start: $local_fs $remote_fs $network $named
# Required-Stop: $local_fs $remote_fs $network
# Should-Start: distcache
# Short-Description: start and stop Apache HTTP Server
# Description: The Apache HTTP Server is an extensible server 
#  implementing the current HTTP standards.
### END INIT INFO

# Find my current dir
BASEDIR=$(/usr/bin/dirname $0)
# NOTE: This behaviour relies on shell builtins for cd and pwd
BASEDIR=$(cd ${BASEDIR}/../.. ; pwd)
[ -f ${BASEDIR}/etc/global.env ] && . ${BASEDIR}/etc/global.env

# Source function library.
. /etc/rc.d/init.d/functions

# Explicity set the PYTHONPATH
#export PYTHONPATH="/proj/lciadm100/tools/django/latest/:/proj/lciadm100/tools/django-auth-ldap/latest/:${PYTHONPATH}"
export PYTHONPATH="/proj/lciadm100/cifwk/latest/lib/python:${PYTHONPATH}"

# Start httpd in the C locale by default.
HTTPD_LANG=${HTTPD_LANG-"C"}

# This will prevent initlog from swallowing up a pass-phrase prompt if
# mod_ssl needs a pass-phrase from the user.
INITLOG_ARGS=""

# Set HTTPD=/usr/sbin/httpd.worker in /etc/sysconfig/httpd to use a server
# with the thread-based "worker" MPM; BE WARNED that some modules may not
# work correctly with a thread-based MPM; notably PHP will refuse to start.

# Path to the apachectl script, server binary, and short-form for messages.
apachectl=/usr/sbin/apachectl
httpd=${HTTPD-/usr/sbin/httpd}
prog=$(basename $0)
TDIR=$(cd $(dirname $0) ; pwd)

# etc dir is the directory up from this one
ETCDIR=$(dirname $TDIR)

# var dir is in the same directory the cifwk is installed in
# on the deployment site this would be /home/lciadm100/cifwk/var
VARDIR=$(dirname $(dirname ${ETCDIR}))/var

OPTIONS="-f ${ETCDIR}/httpd/httpd.conf"

if [ ! -d ${VARDIR}/httpd ] ; then
    mkdir -p ${VARDIR}/httpd
fi

pidfile=${PIDFILE-${VARDIR}/run/httpd.pid}
lockfile=${LOCKFILE-${VARDIR}/run/httpd.lock}
RETVAL=0
STOP_TIMEOUT=${STOP_TIMEOUT-10}

# The semantics of these two functions differ from the way apachectl does
# things -- attempting to start while running is a failure, and shutdown
# when not running is also a failure.  So we just do it the way init scripts
# are expected to behave here.
start() {
        echo -n $"Starting $prog: "
        LANG=$HTTPD_LANG daemon --pidfile=${pidfile} sudo -E PYTHONPATH=${PYTHONPATH} $apachectl $OPTIONS -k start
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && touch ${lockfile}
        return $RETVAL
}
graceful() {
        echo -n $"Graceful Restart Starting $prog: "
        LANG=$HTTPD_LANG daemon --pidfile=${pidfile} sudo -E PYTHONPATH=${PYTHONPATH} $apachectl $OPTIONS -k graceful
        RETVAL=$?
        echo
        return $RETVAL
}

# When stopping httpd, a delay (of default 10 second) is required
# before SIGKILLing the httpd parent; this gives enough time for the
# httpd parent to SIGKILL any errant children.
stop() {
	echo -n $"Stopping $prog: "
    LANG=$HTTPD_LANG daemon --pidfile=${pidfile} sudo -E PYTHONPATH=${PYTHONPATH} $apachectl $OPTIONS -k stop
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}
reload() {
    echo -n $"Reloading $prog: "
    if ! LANG=$HTTPD_LANG $httpd $OPTIONS -t >&/dev/null; then
        RETVAL=6
        echo $"not reloading due to configuration syntax error"
        failure $"not reloading $httpd due to configuration syntax error"
    else
        # Force LSB behaviour from killproc
        LSB=1 killproc -p ${pidfile} $httpd -HUP
        RETVAL=$?
        if [ $RETVAL -eq 7 ]; then
            failure $"httpd shutdown"
        fi
    fi
    echo
}

# When restart option is used we want to ensure that all current 
# httpd processes are stopped before teh service is started again.
restart() {
    #set default result
    stopPIDResult="  OK  "
    stopPIDResultColour="2"
    #Create a list of all httpd processes running
    processList=$(ps -ef| $_EGREP "/usr/sbin/httpd"|$_EGREP -v "egrep"|$_AWK '{print $2}')
    stop
    echo -n "Waiting for httpd processes to terminate:                  "
    if [[ ${processList} != "" ]];then
        for PID in ${processList} ;do
            loopCount=15
            while [[ `ps h ${PID}` != "" && ${loopCount} != 0 ]];do
                (( loopCount-- ))
                if [[ ${loopCount} == "0" ]];then
                    stopPIDResult=FAILED
                    stopPIDResultColour="1"
                fi
                sleep 1
            done
        done
    fi
    echo "[$(tput setaf ${stopPIDResultColour})${stopPIDResult}$(tput sgr0)]"
    start
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  graceful)
	graceful
	;;
  status)
        status -p ${pidfile} $httpd
	RETVAL=$?
	;;
  restart)
	restart
	;;
  condrestart|try-restart)
	if status -p ${pidfile} $httpd >&/dev/null; then
		stop
		start
	fi
	;;
  force-reload|reload)
        reload
	;;
  help|configtest|fullstatus)
	$apachectl $@
	RETVAL=$?
	;;
  *)
	echo $"Usage: $prog {start|stop|restart|condrestart|try-restart|force-reload|reload|status|fullstatus|graceful|help|configtest}"
	RETVAL=2
esac

exit $RETVAL
